@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer localizer
@{
    ViewData["Title"] = localizer["TasksList"];
}

<div class="text-center">
    <h1 class="display-4">@ViewData["Title"]</h1>
    <button type="button" class="btn btn-primary mb-3" onclick="AddNewTaskToList()">
        @localizer["AddNewTask"]
    </button>
</div>

<div id="tasks-lists-container" class="text-center">
    <div id="sortable" class="text-start" data-bind="foreach: tasks">
        <div name="task" class="mb-2 p-2 w-50 mx-auto border" style="cursor: pointer"
             data-bind="click: handleClickTask">
            <div data-bind="text: title, hidden: isNew" class="fw-bold">
            </div>


            <div name="steps-resume" data-bind="visible: totalSteps() > 0">
                <span data-bind="text: completedSteps"></span>/<span data-bind="text: totalSteps"></span>
                <span data-bind="text: completedPercent() + '%', css: completedPercent() <= 25 ? 'text-danger' : completedPercent() > 25 && completedPercent() <= 75  ? 'text-primary' : 'text-success'"></span>
            </div>

            <input type="text" name="task-title" autocomplete="off" class="w-25"
                   data-bind="value: title, visible: isNew,
                    attr: {'data-id': id},
                    event: {focusout: manageFocusoutTaskTitle}" />

        </div>
    </div>

    <div data-bind="visible: loading" class="spinner-border">
        <span class="visually-hidden">@localizer["spinner-loading"]</span>
    </div>

    <div data-bind="visible: thereAreNoTasks">
        @localizer["ThereAreNoTasks"]
    </div>

</div>

<partial name="_ModalEditTask" />

@section Scripts {

    <script src="~/js/utils.js" asp-append-version="true"></script>
    <script src="~/js/tasks.js" asp-append-version="true"></script>
    <script src="~/js/steps.js" asp-append-version="true"></script>
    <script>

         const urlTasks = "/api/tasks";
         const urlSteps = "/api/steps";

        const modalEditTask = document.getElementById('modal-edit-task');
        const modalEditTaskBootstrap = new bootstrap.Modal(modalEditTask);

        ko.bindingHandlers.date = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel) {
                var jsonDate = valueAccessor();                
                const date = new Date(jsonDate());
                var ret = moment(date.toISOString().slice(0, 10)).format('MM/DD/YYYY');
                element.innerHTML = ret;
            },
            update: function(element, valueAccessor, allBindingsAccessor, viewModel) {

            }
        };

        function taskListViewModelFn() {
            var self = this;
            self.tasks = ko.observableArray([]);
            self.loading = ko.observable(true);

            self.thereAreNoTasks = ko.pureComputed(function () {
                if(self.loading()) {
                    return false;
                }
                return self.tasks().length === 0;
            });
        }

        function TaskElementListViewModel({ id, title, isCompleted, createdDate, totalSteps, completedSteps }) {
            var self = this;
            self.id = ko.observable(id);
            self.title = ko.observable(title);
            self.isCompleted = ko.observable(isCompleted);
            self.createdDate = ko.observable(createdDate);
            self.totalSteps = ko.observable(totalSteps);
            self.completedSteps = ko.observable(completedSteps);
            self.isNew = ko.pureComputed(function () {
                return self.id() == 0;
            })

            self.completedPercent = ko.pureComputed(function () {
                if (self.totalSteps() == 0) {
                    return 0;
                }
                const calc = Math.round((self.completedSteps() / self.totalSteps()) * 100);
                return calc;
            });
        }

        const taskEditVM = {
            id: 0,
            title: ko.observable(''),
            description: ko.observable(''),
            isCompleted: ko.observable(false),
            createdDate: ko.observable(new Date()),
            steps: ko.observableArray([]),
        }

        const taskListViewModel = new taskListViewModelFn();

        function StepViewModel({id, description, isCompleted, editMode}) {
            var self = this;
            self.id = ko.observable(id || 0);
            self.description = ko.observable(description || '');
            self.previousDescription = '';
            self.isCompleted = ko.observable(isCompleted);
            self.editMode = ko.observable(editMode);

            self.toggleEditMode = function () {
                self.editMode(!self.editMode());
            }

            self.isNew = ko.pureComputed(function () {
                return self.id() == 0;
            })
        }

        getTasks(urlTasks);

        ko.applyBindings(taskListViewModel, document.getElementById("tasks-lists-container"));
        ko.applyBindings(taskEditVM, document.getElementById('modal-edit-task'));

    </script>
}