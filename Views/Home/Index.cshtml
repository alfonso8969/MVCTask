@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer localizer
@{
    ViewData["Title"] = localizer["TasksList"];
}

<div class="text-center">
    <h1 class="display-4">@ViewData["Title"]</h1>
    <button type="button" class="btn btn-primary mb-3" onclick="AddNewTaskToList()">
        @localizer["AddNewTask"]
    </button>
</div>

<div id="tasks-lists-container" class="text-center">
    <div id="sortable" class="text-start" data-bind="foreach: tasks">
        <div name="task" class="mb-2 p-2 border" style="cursor: pointer"
             data-bind="click: handleClickTask">
            <div data-bind="text: title, hidden: isNew" class="fw-bold">
            </div>

            <input type="text" name="task-title" autocomplete="off"
                   data-bind="value: title, visible: isNew,
                    attr: {'data-id': id},
                    event: {focusout: manageFocusoutTaskTitle}" />

        </div>
    </div>

    <div data-bind="visible: loading" class="spinner-border">
        <span class="visually-hidden">@localizer["spinner-loading"]</span>
    </div>

    <div data-bind="visible: thereAreNoTasks">
        @localizer["ThereAreNoTasks"]
    </div>

</div>

<partial name="_ModalEditTask" />

@section Scripts {

    <script src="~/js/utils.js" asp-append-version="true"></script>
    <script src="~/js/tasks.js" asp-append-version="true"></script>
    <script>

         const urlTasks = "/api/tasks";

        const modalEditTask = document.getElementById('modal-edit-task');
        const modalEditTaskBootstrap = new bootstrap.Modal(modalEditTask);

        function taskListViewModelFn() {
            var self = this;
            self.tasks = ko.observableArray([]);
            self.loading = ko.observable(true);

            self.thereAreNoTasks = ko.pureComputed(function () {
                if(self.loading()) {
                    return false;
                }
                return self.tasks().length === 0;
            });
        }

        function TaskElementListViewModel({ id, title }) {
            var self = this;
            self.id = ko.observable(id);
            self.title = ko.observable(title);
            self.isNew = ko.pureComputed(function () {
                return self.id() == 0;
            })
        }

        const taskEditVM = {
            id: 0,
            title: ko.observable(''),
            description: ko.observable('')
        }

        const taskListViewModel = new taskListViewModelFn();

        getTasks(urlTasks);

        ko.applyBindings(taskListViewModel, document.getElementById("tasks-lists-container"));
        ko.applyBindings(taskEditVM, document.getElementById('modal-edit-task'));

    </script>
}